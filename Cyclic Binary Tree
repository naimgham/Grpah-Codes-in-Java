import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Graph {
  public static void main(String[] args) throws FileNotFoundException {
		File f = new File("graph.in");
		Scanner scan = new Scanner(f);
		int cases = scan.nextInt();
		for (int index = 0; index < cases; index++) {
			int nodes = scan.nextInt();
			int edges = scan.nextInt();
			int[][] al = new int[nodes][nodes];
			int[] deg = new int[nodes];
			for (int i = 0; i < edges; i++) {
				int u = scan.nextInt();
				int v = scan.nextInt();
				al[u][deg[u]++] = v;
				al[v][deg[v]++] = u;
			}
			
			if (isCyclic(al, deg) == true) {
				System.out.println("It is a Cycle");
			} else
				System.out.println("Not a Cycle");
      }
    }
    public static boolean isCyclic(int[][] a, int[] d) {
  	Queue<Integer> q = new LinkedList<Integer>();
		int nodes = a.length;
		int[] color = new int[nodes];
		q.offer(0);
		color[0]++;
		while (!q.isEmpty()) {
			int temp = q.poll();
			for (int i = 0; i < d[temp]; i++) {
				if (color[a[temp][i]] == 1) {
					return true;
				}
				color[a[temp][i]]++;
				q.offer(a[temp][i]);
				if (color[a[temp][i]] == 2)
					return true;
			}
		}
		return false;
	}
